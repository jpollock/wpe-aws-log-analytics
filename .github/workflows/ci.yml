name: CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: infrastructure/terraform/lambda/package-lock.json

    - name: Install Lambda dependencies
      working-directory: infrastructure/terraform/lambda
      run: npm ci

    - name: Run tests
      working-directory: infrastructure/terraform/lambda
      run: npm test

  terraform:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.0.0"

    - name: Terraform Format
      working-directory: infrastructure/terraform
      run: terraform fmt -check

    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Plan
      working-directory: infrastructure/terraform
      run: terraform plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

  build-lambda:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js 18.x
      uses: actions/setup-node@v3
      with:
        node-version: 18.x
        cache: 'npm'
        cache-dependency-path: infrastructure/terraform/lambda/package-lock.json

    - name: Build Lambda
      working-directory: infrastructure/terraform/lambda
      run: |
        chmod +x build.sh
        ./build.sh

    - name: Upload Lambda artifact
      uses: actions/upload-artifact@v3
      with:
        name: lambda-package
        path: infrastructure/terraform/log_processor.zip

  deploy:
    needs: [terraform, build-lambda]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Download Lambda artifact
      uses: actions/download-artifact@v3
      with:
        name: lambda-package
        path: infrastructure/terraform

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.0.0"

    - name: Terraform Init
      working-directory: infrastructure/terraform
      run: terraform init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

    - name: Terraform Apply
      working-directory: infrastructure/terraform
      run: terraform apply -auto-approve
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        TF_VAR_alert_email: ${{ secrets.ALERT_EMAIL }}
        TF_VAR_log_bucket_name: ${{ secrets.LOG_BUCKET_NAME }}
